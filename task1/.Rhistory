max(data$tcpsck)
max(data1$tcpsck)
data1 <- read.csv(X.csv)
data1 <- read.csv("X.csv")
X <- read.csv("~/EP2300_Management of Networks and Networked Systems/Project/work/X.csv", header=FALSE)
View(X)
max(data1$tcpsck)
data1 <- read.csv("X.csv")
View(X)
View(X)
View(X)
max(X$tcpsck)
data1 <- read.csv("X.csv")
setwd("~/EP2300_Management of Networks and Networked Systems/Project/task1")
max(data1$tcpsck, na.rm = TRUE)
data1<-read.csv("X.csv")
max(data1$tcpsck, na.rm = TRUE)
data1<-read.csv("X.csv")
max(data1$tcpsck)
data1<-read.csv("X.csv")
max(data1$tcpsck)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R')
data1<-read.csv("X.csv")
max(data1$tcpsck)
data1<-read.csv("X.csv")
max(data1$tcpsck)
data1<-read.csv("X.csv")
data1<-read.csv("X.csv")
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R')
data1<-read.csv("X.csv")
data1<-read.csv("X.csv")
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R')
data1<-read.csv("X.csv")
max(data1$tcpsck)
data1<-read.csv("X.csv")
max(data1$tcpsck)
max(data1$tcpsck)
max(data1$tcpsck)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R')
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
datax.socket <- data.x[data.x$sum_intr.s > 18000,]
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
source('~/EP2300_Management of Networks and Networked Systems/Project/task1/task1_v0.R', echo=TRUE)
library(ggplot2)
options(digits = 12)
#to get the dataset files as command line arguments as mentioned in the specifications
args = commandArgs(trailingOnly=TRUE)
# test if there is at least one argument: if not, return an error
if (length(args)!=2) {
stop("The two arguments must be supplied (both the input files).n", call.=FALSE)
}
X <- args[1]
Y <- args[2]
#print(X)
# importing datasets
data.x <- read.csv(file = X)
data.y <- read.csv(file = Y)
library(ggplot2)
options(digits = 12)
#to get the dataset files as command line arguments as mentioned in the specifications
args = commandArgs(trailingOnly=TRUE)
# test if there is at least one argument: if not, return an error
if (length(args)!=2) {
stop("The two arguments must be supplied (both the input files).n", call.=FALSE)
}
X <- args[1]
Y <- args[2]
#print(X)
# importing datasets
data.x <- read.csv(file = X)
data.y <- read.csv(file = Y)
data.x <-read.csv(X.csv)
data.y <-read.csv(Y.csv)
Y <- read.csv("~/EP2300_Management_of_Networks_and_Networked_Systems/Project/task1/Y.csv")
View(Y)
X <- read.csv("~/EP2300_Management_of_Networks_and_Networked_Systems/Project/task1/X.csv", header=FALSE)
View(X)
data.x <-read.csv(X.csv)
data.y <-read.csv(Y.csv)
data.x <-read.csv("X.csv")
data.y <-read.csv("Y.csv"")
#validation-set technique
data <- data.x[1:10]
data["DispFrames"] <- data.y$DispFrames
data.x <-read.csv("X.csv")
data.y <-read.csv("Y.csv")
#validation-set technique
data <- data.x[1:10]
data["DispFrames"] <- data.y$DispFrames
# proportion of subset data
prob <- 0.7
set.seed(1234)
# training and test data set
training.s <- sample (1:nrow(data), round(prob*nrow(data),0))
data.train <- data[training.s,]
data.test <- data[-training.s,]
#print(data.train)
#print(data.test)
#Model Training - use linear regression to train a model M with the training set.
#Provide the coefficients (Θ 1 , ..., Θ 9 ) of your model M .
linear.model <- lm(data.train$DispFrames ~., data = data.train[2:10], method = "qr" )
#summary(linear.model)
ans <- predict(linear.model, data.test[2:10])
data.test["answer"] = ans
#Accuracy of Model M - compute the estimation error of M over the test P set.
#We define the estimation error as the Normalized Mean Absolute Error.
#We consider an estimation accurate if NMAE < 15%.
y.i <- mean(data.test$DispFrames)
diff <- abs(c(data.test$DispFrames - ans))
accuracy <- (sum(diff)/1080)/y.i
print(accuracy)
#Produce a time series plot that shows the measurements and the model estimations for
#the Video Frame Rate values in the test set.
x = data.test$TimeStamp
y1 = data.test$DispFrames
y2 = data.test$answer
plot(x,y1,type="p",col="red", ylim=c(0,30))
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("topright", inset=.05, cex = 1, title="Legend", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), horiz=TRUE, lty=c(1,1), lwd=c(2,2), col=c("red","blue"), bg="grey96")
d1 <- density(data.test$DispFrames) # returns the density data
plot(d1, type = "o", col = "blue", main="Density plot of measured video frame rate values in the test set") # plots the results
polygon(d1, col="red")
d2 <- density(diff) # returns the density data
plot(d2, type = "o", col = "blue", main="Density plot of Absolute Errors in the test set") # plots the results
polygon(d2, col="red")
prob.50 <- 0.0198412698
prob.500 <- 0.1984126984
prob.1000 <- 0.3968253968
prob.1500 <- 0.5952380952
prob.2520 <- 1
set.seed(1234)
training.set <- function(x, y) {
c(x[sample(1:nrow(x), round(y*nrow(x),0)),])
}
data.50 <- training.set(data.train, prob.50)
data.50.train <- training.set(data.train, prob.50)
print(data.50.train)
data.50.train <- training.set(data.train, prob.50)
data.500.train <- training.set(data.train, prob.500)
data.1000.train <- training.set(data.train, prob.1000)
data.1500.train <- training.set(data.train, prob.1500)
data.2520.train <- training.set(data.train, prob.2520)
model.training <- function(x, y) {
c(lm(x ~., data = y[2:10], method = "qr" ))
}
linear.model.50 = model.training(data.50.train$DispFrames, data.50.train)
coefficients(linear.model.50)
linear.model.500 = model.training(data.500.train$DispFrames, data.500.train)
coefficients(linear.model.500)
linear.model.1000 = model.training(data.1000.train$DispFrames, data.1000.train)
coefficients(linear.model.1000)
linear.model.1500 = model.training(data.1500.train$DispFrames, data.1500.train)
coefficients(linear.model.1500)
linear.model.2520 = model.training(data.2520.train$DispFrames, data.2520.train)
coefficients(linear.model.2520)
average.y = mean(data.test$DispFrames)
model.NMAE <- function(x) {
prediction <- predict(x, data.test[2:10])
difference <- abs(c(data.test$DispFrames - prediction))
summation <- sum(difference)
answer <- (summation/1080)/average.y
c(answer)
}
result <- model.NMAE(linear.model.50)
ans.50 = predict(linear.model.50, data.test[2:10])
linear.model.50 = model.training(data.50.train$DispFrames, data.50.train)
coefficients(linear.model.50)
ans.50 = predict(linear.model.50, data.test[2:10])
ans <- predict(linear.model, data.test[2:10])
prediction <- predict(x, data.test[2:10])
ans.50 = predict(linear.model.50, data.test[2:10])
model.NMAE <- function(x) {
prediction <- predict(x, data.test[2:10])
difference <- abs(c(data.test$DispFrames - prediction))
summation <- sum(difference)
answer <- (summation/1080)/average.y
c(answer)
}
result <- model.NMAE(linear.model.50)
linear.model.50 = model.training(data.50.train$DispFrames, data.50.train)
coefficients(linear.model.50)
ans.50 = predict(linear.model.50, data.test[2:10])
linear.model.50 = lm(data.50.train$DispFrames ~., data = data.50.train, method = "qr")
coefficients(linear.model.50)
average.y = mean(data.test$DispFrames)
model.NMAE <- function(x) {
prediction <- predict(x, data.test[2:10])
difference <- abs(c(data.test$DispFrames - prediction))
summation <- sum(difference)
answer <- (summation/1080)/average.y
c(answer)
}
result <- model.NMAE(linear.model.50)
model.training <- function(x) {
c(lm(x$DispFrames ~., data = x[2:10], method = "qr" ))
}
linear.model.50 = model.training(data.50.train)
coefficients(linear.model.50)
linear.model.50 = model.training(data.50.train)
coefficients(linear.model.50)
linear.model.500 = model.training(data.500.train)
coefficients(linear.model.500)
linear.model.1000 = model.training(data.1000.train)
coefficients(linear.model.1000)
linear.model.1500 = model.training(data.1500.train)
coefficients(linear.model.1500)
linear.model.2520 = model.training(data.2520.train)
coefficients(linear.model.2520)
#Training Time of the Models - on your computer, measure the execution time
#(in milliseconds) to train each of the five models.
time.50 = system.time(lm(data.50.train$DispFrames ~., data = data.50.train[2:10], method = "qr" ))
time.500 = system.time(lm(data.500.train$DispFrames ~., data = data.500.train[2:10], method = "qr" ))
time.1000 = system.time(lm(data.1000.train$DispFrames ~., data = data.1000.train[2:10], method = "qr" ))
time.1500 = system.time(lm(data.1500.train$DispFrames ~., data = data.1500.train[2:10], method = "qr" ))
time.2520 = system.time(lm(data.2520.train$DispFrames ~., data = data.2520.train[2:10], method = "qr" ))
average.y = mean(data.test$DispFrames)
model.NMAE <- function(x) {
prediction <- predict(x, data.test[2:10])
difference <- abs(c(data.test$DispFrames - prediction))
summation <- sum(difference)
answer <- (summation/1080)/average.y
c(answer)
}
result <- model.NMAE(linear.model.50)
prediction <- predict(linear.model.50, data.test[2:10])
result <- model.NMAE(linear.model.50)
prediction <- predict(linear.model.50, data.test[2:10])
linear.model.50 = lm(data.50.train$DispFrames~., data = data.50.train, method = "qr")
coefficients(linear.model.50)
ans.50 = predict(linear.model.50, data.test[2:10])
