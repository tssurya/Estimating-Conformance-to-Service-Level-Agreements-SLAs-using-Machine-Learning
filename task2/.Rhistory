result.500 <- model.NMAE(linear.model.500)
result.1000 <- model.NMAE(linear.model.1000)
result.1500 <- model.NMAE(linear.model.1500)
result.2520 <- model.NMAE(linear.model.2520)
nmae <- c(result.50, result.500, result.1000, result.1500, result.2520)
x.axis <- c(50,500,1000,1500,2520)
print(x.axis)
print(time)
print(nmae)
jpeg('Time_Series.jpg', width=600,height=500)
plot(x.axis,nmae,type="p",col="red")
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4, ylim=c(0,0.05))
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
dev.off()
plot(x.axis,nmae,type="p",col="red")
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4, ylim=c(0,0.05))
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
dev.off()
jpeg('Time_Series.jpg', width=600,height=500)
plot(x.axis,nmae,type="p",col="red")
plot(x.axis,nmae,type="p",col="red")
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4, ylim=c(0,0.05))
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
dev.off()
plot(x.axis,nmae,type="p",col="red")
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4, ylim=c(0,0.05))
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
plot(x.axis,nmae,type="p",col="red")
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4, ylim=c(0,10))
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
plot(x.axis,nmae,type="p",col="red")
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4)
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
plot(x.axis,nmae,type="p",col="red", ylim = c(0,10))
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
jpeg('Time_Series.jpg', width=600,height=500)
plot(x.axis,nmae,type="p",col="red", ylim = c(0,8))
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4)
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
plot(x.axis,nmae,type="p",col="red", ylim = c(0,8))
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4)
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
print(time)
print(nmae)
plot(x.axis,nmae,type="p",col="red", ylim = c(0,8))
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4)
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
plot(x.axis,nmae,type="p",col="red", ylim = c(0,8))
par(new=TRUE)
lines(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n")
axis(4)
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
plot(x.axis,nmae,type="p",col="red", ylim = c(0,0.2) )
par(new=TRUE)
plot(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n", ylim = c(0,8))
axis(4)
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
plot(x.axis,nmae,type="p",col="red", ylim = c(0,0.2) )
mtext("normalised mean absolute error",side=4,line=3)
=
=
plot(x.axis,nmae,type="p",col="red", ylim = c(0,0.2) )
mtext("normalised mean absolute error",side=4,line=3)
par(new=TRUE)
plot(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n", ylim = c(0,8))
axis(4)
mtext("execution time",side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
plot(x.axis,nmae,type="p",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=4,line=3)
par(new=TRUE)
plot(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "training time" )
axis(4)
plot(x.axis,nmae,type="p",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=4,line=3)
par(new=TRUE)
plot(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n", ylim = c(0,8))
axis(4)
mtext(ylab = "training time" ,side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","Execution time"))
plot(x.axis,nmae,type="p",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=4,line=3)
par(new=TRUE)
plot(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n", ylim = c(0,8))
axis(4)
mtext(ylab = "training time" ,side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
plot(x.axis,nmae,type="p",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=4,line=3)
par(new=TRUE)
plot(x.axis,time,type="p",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), ylab = "training time" )
axis(4)
mtext("training time" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
plot(x.axis,nmae,type="p",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=4,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8))
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=4,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8))
axis(4)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
mtext("normalised mean absolute error",side=1,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8))
axis(4)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
mtext("normalised mean absolute error",side=2,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8))
axis(4)
mtext("training time" ,side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
mtext("normalised mean absolute error",side=2,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time" ,side=4,line=3)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
mtext("normalised mean absolute error",side=2,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time" ,side=4,line=1)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time" ,side=4,line=1)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
dev.off()
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error", line = 2 )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set")
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set")
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time" ,side=4,line=1)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error", line = 2 )
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time" ,side=4,line=1)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
dev.off()
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
mtext("normalised mean absolute error",side=2,line=2)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time" ,side=4,line=1)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time" ,side=4,line=2)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
dev.off()
e
e
e
jpeg('Time_Series.jpg', width=700,height=500)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
dev.off()
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
dev.off()
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error", main="NMAE and Training Time for all models" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
dev.off()
jpeg('2d.jpg', width=1000,height=1000)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error", main="NMAE and Training Time for all models" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
dev.off()
jpeg('2d.jpg', width=600,height=500)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error", main="NMAE and Training Time for all models" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error", main="NMAE and Training Time for all models" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error", main="NMAE and Training Time for all models" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
dev.off()
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "normalized mean absolute error", main="NMAE and Training Time for all models" )
#mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "size of training set", ylab = "normalized mean absolute error")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=4)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time"))
dev.off()
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=2)
mtext("training time(in milli seconds)" ,side=4,line=1)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time(ms)"))
dev.off()
result.1500 <- model.NMAE(linear.model.1500)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=2)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time(ms)"))
dev.off()
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4)
"
"
"
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=2)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=2)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time(ms)"))
par(mar = c(5, 4, 4, 4) + 0.3)
plot(x.axis,nmae,type="b",col="red", ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=2)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time(ms)"))
par(mar = c(5, 4, 4, 4) + 0.3)
plot(x.axis,nmae,type="b",col="red", las = 1, ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=2)
par(new=TRUE)
plot(x.axis,nmae,type="b",col="red", las = 1, ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=3)
par(new=TRUE)
par(mar = c(5, 4, 4, 4) + 0.3)
plot(x.axis,nmae,type="b",col="red", las = 1, ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=3)
jpeg('2d.jpg', width=600,height=500)
par(mar = c(5, 4, 4, 4) + 0.3)
plot(x.axis,nmae,type="b",col="red", las = 1, ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=2)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time(ms)"))
dev.off()
par(mar = c(5, 4, 4, 4) + 0.3)
plot(x.axis,nmae,type="b",col="red", las = 1, ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", las = 1, ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=3)
par(mar = c(5, 4, 4, 4) + 0.3)
plot(x.axis,nmae,type="b",col="red", las = 1, ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", las = 1, ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=2)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time(ms)"))
dev.off()
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="b",col="red", ylim=c(0,30), main="time series plot that shows the measurements and the model estimations for
#the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="b",col="blue", ylim=c(0,30))
legend("topright", inset=.05, cex = 1, title="Legend", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), horiz=TRUE, lty=c(1,1), lwd=c(2,2), col=c("red","blue"), bg="grey96")
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="b",col="red", ylim=c(0,30), main="time series plot that shows the measurements and the model estimations for
#the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="b",col="blue", ylim=c(0,30))
legend("topright", inset=.05, cex = 1, title="Legend", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), horiz=TRUE, lty=c(1,1), lwd=c(2,2), col=c("red","blue"), bg="grey96")
dev.off()
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="b",col="red", ylim=c(0,30), main="time series plot that shows the measurements and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="b",col="blue", ylim=c(0,30))
legend("topright", inset=.05, cex = 1, title="Legend", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), horiz=TRUE, lty=c(1,1), lwd=c(2,2), col=c("red","blue"), bg="grey96")
dev.off()
plot(x,y1,type="p",col="red", ylim=c(0,30), main="time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("topright", inset=.05, cex = 1, title="Legend", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), horiz=TRUE, lty=c(1,1), lwd=c(2,2), col=c("red","blue"), bg="grey96")
plot(x,y1,type="p",col="red", ylim=c(0,30), main="time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("bottomright", inset=.05, cex = 1, title="Legend", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), horiz=TRUE, lty=c(1,1), lwd=c(2,2), col=c("red","blue"), bg="grey96")
dev.off()
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="p",col="red", ylim=c(0,30), main="time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("bottomright", inset=.05, cex = 1, title="Legend", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), horiz=TRUE, lty=c(1,1), lwd=c(2,2), col=c("red","blue"), bg="grey96")
dev.off()
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="p",col="red", ylim=c(0,30), main="time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("bottomright", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), horiz=TRUE, lty=c(1,1), lwd=c(2,2), col=c("red","blue"), bg="grey96")
dev.off()
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="p",col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("bottomright", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
dev.off()
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="p",col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("bottomright",lty=1, c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
dev.off()
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", las = 1, ylim = c(0,8), xlab = "", ylab = "")
plot(x,y1,type="p",col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("bottomright",bty=1, c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
dev.off()
plot(x,y1,type="p",col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("bottomright",bty="n", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
dev.off()
plot(x,y1,type="p",col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("bottomright",lty="p", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
dev.off()
plot(x,y1,type="p",col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p",col="blue", ylim=c(0,30))
legend("bottomright",bty="p", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
plot(x,y1,type="p", pch = 16, col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", pch = 21, col="blue", ylim=c(0,30))
legend("bottomright",pch=c(16,15), c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright",pch=c(16,15), c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright",pch=c(16,16), c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright",bty = "n", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col=c("red","blue"))
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright",bty = "n", c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), pt.bg=c("red","blue"))
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright",pch=c(16,16), c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), pt.bg = c("red","blue"))
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright", bty='n', c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), pt.bg = c("red","blue"))
dev.off()
,
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright", bty='n',lty=1, c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), pt.bg = c("red","blue"))
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright", lty=1, c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col = c("red","blue"))
plot(x,y1,type="b",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="b", col="blue", ylim=c(0,30))
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="b",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="b", col="blue", ylim=c(0,30))
legend("bottomright", lty=1, c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col = c("red","blue"))
dev.off()
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="b",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="b", col="blue", ylim=c(0,30))
legend("bottomright", lty=1, c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col = c("red","blue"))
dev.off()
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright", bty='n', c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col = c("red","blue"))
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright", bty='n', pch = c(21, 21), c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col = c("red","blue"))
jpeg('1c.jpg', width=600,height=500)
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright", bty='n', pch = c(21, 21), c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col = c("red","blue"))
dev.off()
d1 <- density(data.test$DispFrames) # returns the density data
plot(d1, type = "o", col = "blue", main="Density plot of measured video frame rate values in the test set") # plots the results
polygon(d1, col="red")
jpeg('1d.jpg', width=600,height=500)
d1 <- density(data.test$DispFrames) # returns the density data
plot(d1, type = "o", col = "blue", main="Density plot of measured video frame rate values in the test set") # plots the results
polygon(d1, col="red")
dev.off()
jpeg('1e.jpg', width=600,height=500)
d2 <- density(diff) # returns the density data
plot(d2, type = "o", col = "blue", main="Density plot of Absolute Errors in the test set") # plots the results
polygon(d2, col="red")
dev.off()
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright", title="Legend", bty='n', pch = c(21, 21), c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col = c("red","blue"))
plot(x,y1,type="p",  col="red", ylim=c(0,30), main="Time series plot that shows the measurements \n and the model estimations for the Video Frame Rate values in the test set", xlab="TimeStamp", ylab= "Video Frame Rates")
lines(x,y2,type="p", col="blue", ylim=c(0,30))
legend("bottomright", title="Legend",  pch = c(21, 21), c("Measured Video Frame Rate","Model Estimated Video Frame Rate"), col = c("red","blue"))
par(mar = c(5, 4, 4, 4) + 0.3)
plot(x.axis,nmae,type="b",col="red", las = 1, ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", las = 1, ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=2)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time(ms)"))
dev.off()
jpeg('2d.jpg', width=600,height=500)
par(mar = c(5, 4, 4, 4) + 0.3)
plot(x.axis,nmae,type="b",col="red", las = 1, ylim = c(0,0.2), xlab = "size of training set", ylab = "", main="NMAE and Training Time for all models" )
mtext("normalised mean absolute error",side=2,line=3)
par(new=TRUE)
plot(x.axis,time,type="b",col="blue", xaxt="n",yaxt="n", las = 1, ylim = c(0,8), xlab = "", ylab = "")
axis(4)
mtext("training time(in milli seconds)" ,side=4,line=2)
legend("topleft", col=c("red","blue"),lty=1,legend=c("NMAE","training time(ms)"))
dev.off()
print(data.train)
